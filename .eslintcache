[{"C:\\Users\\evers\\Desktop\\businesspedia\\src\\index.js":"1","C:\\Users\\evers\\Desktop\\businesspedia\\src\\App.js":"2","C:\\Users\\evers\\Desktop\\businesspedia\\src\\Navbar.js":"3","C:\\Users\\evers\\Desktop\\businesspedia\\src\\BusinessCard.js":"4","C:\\Users\\evers\\Desktop\\businesspedia\\src\\PriceBar.js":"5","C:\\Users\\evers\\Desktop\\businesspedia\\src\\Footer.js":"6"},{"size":117,"mtime":1609186632057,"results":"7","hashOfConfig":"8"},{"size":296,"mtime":1609554873139,"results":"9","hashOfConfig":"8"},{"size":1376,"mtime":1609553298055,"results":"10","hashOfConfig":"8"},{"size":9930,"mtime":1609621273665,"results":"11","hashOfConfig":"8"},{"size":316,"mtime":1609464686384,"results":"12","hashOfConfig":"8"},{"size":419,"mtime":1609630869808,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ghqw0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\evers\\Desktop\\businesspedia\\src\\index.js",[],["28","29"],"C:\\Users\\evers\\Desktop\\businesspedia\\src\\App.js",[],"C:\\Users\\evers\\Desktop\\businesspedia\\src\\Navbar.js",[],"C:\\Users\\evers\\Desktop\\businesspedia\\src\\BusinessCard.js",["30"],"import React, { Component } from 'react';\r\n\r\nexport default class BusinessCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            companyCod: \"AMZN\",\r\n            company: [],\r\n            companyFinancials: [],\r\n            companyNews: [],\r\n        }\r\n    }\r\n    \r\n    loadingBusinessCard = async (companyCod) => {\r\n        const urlApi = 'https://financialmodelingprep.com/api/v3/profile/' +\r\n        companyCod +'?apikey=3dd8e7d17a0f7d39c6ce46133ab2e208'\r\n        fetch(urlApi)\r\n            .then(res => res.json())\r\n            .then(json =>{\r\n                this.setState({\r\n                    company: json\r\n                })\r\n            })\r\n    }\r\n\r\n    loadingBusinessPrices = (companyCod) => {\r\n        const urlAPi = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' +\r\n        companyCod + '&outputsize=full&apikey=21456MVFYRFCAMX6' \r\n    }\r\n\r\n    loadingBusinessFinancials = async (companyCod) => {\r\n        const urlApi = 'https://api.polygon.io/v2/reference/financials/'\r\n        + companyCod + '?limit=10&type=YA&sort=-calendarDate&apiKey=CS4QQvffYLSCRPZG6wGVK4A4xjEzGj_P'\r\n        fetch(urlApi)\r\n            .then(res => res.json())\r\n            .then(json => (\r\n                this.setState({\r\n                    companyFinancials: json.results\r\n                })\r\n            ))\r\n    }\r\n\r\n    loadingBusinessNews = async (companyCod) => {\r\n        var today = new Date();\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n        today = yyyy + '-' + mm + '-' + dd\r\n        const urlApi = 'https://finnhub.io/api/v1/company-news?symbol=' +\r\n        companyCod + '&from=' + today + '&' + today  + '&token=bvnvpmv48v6pasoe9bk0' \r\n        fetch(urlApi)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    companyNews: json\r\n                })\r\n            })\r\n    }\r\n\r\n    formatingLetters = (string) => {\r\n        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n    }\r\n\r\n    formatingValues = (val) => {\r\n        const valString = val.toString()\r\n        if(valString.charAt(0) === '-'){\r\n            if(valString.length >= 8 && valString.length <= 10){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-3)) + 'M'\r\n            }\r\n            else if(valString.length >= 11 && valString.length <= 13){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-6)) + 'B'\r\n            }\r\n            else if(valString.length >= 14 && valString.length <= 16){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-9)) + 'T'\r\n            }\r\n            else{\r\n                return val\r\n            }\r\n        }\r\n        else{\r\n            if(valString.length >= 7 && valString.length <= 9){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-3)) + 'M'\r\n            }\r\n            else if(valString.length >= 10 && valString.length <= 12){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-6)) + 'B'\r\n            }\r\n            else if(valString.length >= 13 && valString.length <= 15){\r\n                return new Intl.NumberFormat().format((val).toString().slice(0,-9)) + 'T'\r\n            }\r\n            else{\r\n                return val\r\n            }\r\n        }\r\n    }\r\n  \r\n    changeHandler = (e) => {\r\n        const companyCod = e.target.value\r\n        this.setState({companyCod})\r\n\r\n        this.loadingBusinessCard(companyCod)\r\n        this.loadingBusinessFinancials(companyCod)\r\n        this.loadingBusinessNews(companyCod)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadingBusinessCard(this.state.companyCod)\r\n        this.loadingBusinessFinancials(this.state.companyCod)\r\n        this.loadingBusinessNews(this.state.companyCod)\r\n    }\r\n\r\n    render() {\r\n        const {company, companyNews} = this.state\r\n        const {companyFinancials} = this.state\r\n\r\n        return (\r\n            <div className=\"content\">\r\n                <div className=\"btnSearch\">\r\n                    <select value={this.state.companyCod} onChange={this.changeHandler}>\r\n                        <option selected>Select the company</option>\r\n                        <option value=\"MSFT\">Microsoft</option>\r\n                        <option value=\"AAPL\">Apple</option>\r\n                        <option value=\"TSLA\">Tesla</option>\r\n                    </select>\r\n                </div>\r\n\r\n                \r\n                {company.map(item => (\r\n                <div className=\"company\">\r\n                    <div  className=\"comapanyProfile\">\r\n                        <div className=\"comapanyLogo\">\r\n                            <img src={item.image} alt='Logo' />\r\n                        </div>\r\n                        <ul>\r\n                            <li><b>Symbol:</b> {item.symbol}</li>\r\n                            <li><b>Market Cap:</b> {'$' + (new Intl.NumberFormat().format(item.mktCap))}</li>\r\n                            <li><b>Headquarters:</b> {this.formatingLetters(item.state)} - {item.country}</li>\r\n                            <li><b>IPO:</b> {(item.ipoDate).replaceAll('-','/')} - {item.exchangeShortName}</li>\r\n                            <li><b>Employees:</b> {new Intl.NumberFormat().format(item.fullTimeEmployees)}</li>\r\n                            <li><b>Industry:</b> {item.industry}</li>\r\n                            <li><b>Sector:</b> {item.sector}</li>\r\n                            <li><b>CEO:</b> {item.ceo}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"comapanyDesc\">\r\n                        <h1>{item.companyName}</h1>\r\n                        <p> {item.description} </p>\r\n                    </div>\r\n                </div>\r\n                ))}\r\n              \r\n\r\n                <div className=\"companyFinancials\">\r\n                    <div className=\"companyFInancialTable\">\r\n                        <table>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Year</th>\r\n                                    <th>Equity</th>\r\n                                    <th>Revenue</th>\r\n                                    <th>EBITDA</th>\r\n                                    <th>Net Inc.</th>\r\n                                    <th>Net Mar.</th>\r\n                                    <th>ROE</th>\r\n                                    <th>Cash</th>\r\n                                    <th>Debt</th>\r\n                                    <th>N.D./EBITDA</th>\r\n                                    <th>DPS</th>\r\n                                    <th>DY</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {companyFinancials.map(item => (\r\n                                <tr key={item.id}>\r\n                                    <th> {(item.calendarDate).toString().substring(0,4).replace('-','/')} </th>\r\n                                    <th> {this.formatingValues(item.shareholdersEquity)} </th>\r\n                                    <th> {this.formatingValues(item.revenues)} </th>\r\n                                    <th> {this.formatingValues(item.earningsBeforeInterestTaxesDepreciationAmortization)} </th>\r\n                                    <th> {this.formatingValues(item.netIncome)} </th>\r\n                                    <th> { (((item.netIncome / item.revenues) * 100) < 0) ? 'L' : (((item.netIncome / item.revenues) * 100).toString().substring(0,4) + '%')} </th>\r\n                                    <th> {((item.returnOnAverageEquity) < 0) ? 'L' : ((((item.returnOnAverageEquity) * 100).toString().substring(0,4)) + '%')}</th>\r\n                                    <th> {this.formatingValues(item.cashAndEquivalents)} </th>\r\n                                    <th> {this.formatingValues(item.debt)} </th>\r\n                                    <th> {((item.debt / item.earningsBeforeInterestTaxesDepreciationAmortization) < 0) ? \"L\" : (item.debt / item.earningsBeforeInterestTaxesDepreciationAmortization).toString().substring(0,4)} </th>\r\n                                    <th> {(item.dividendsPerBasicCommonShare).toString().substring(0,4)} </th>\r\n                                    <th> {((item.dividendYield).toString().substring(0,4)) + '%'} </th>\r\n                                </tr>\r\n                            ))}\r\n                            </tbody>\r\n                        </table>    \r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"companyNewsCoins\">\r\n                    <div className=\"companyNews\">\r\n                    {companyNews.slice(0,3).map(item => (\r\n                    <a href={item.url} target=\"_blank\" rel=\"noreferrer\" className='companyNews'>\r\n                        <div className=\"companyNewsImg\">\r\n                            <img src={item.image} alt={item.related} title={item.related} />\r\n                        </div>\r\n                        <div className=\"companyNewsTxt\">\r\n                            <h2> {item.headline} </h2>\r\n                            <p> {item.summary} </p>\r\n                            <h6> {item.source} </h6>\r\n                        </div>\r\n                    </a>\r\n                    ))}\r\n                    </div>            \r\n                    <div className=\"companyCoins\">\r\n                        <div>\r\n                            <h1>Coins</h1>\r\n                            <p>\r\n                                csadfs\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\evers\\Desktop\\businesspedia\\src\\PriceBar.js",[],"C:\\Users\\evers\\Desktop\\businesspedia\\src\\Footer.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":28,"column":15,"nodeType":"37","messageId":"38","endLine":28,"endColumn":21},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'urlAPi' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]